# AI Stock Metrics Collection Script for Google Colab# This script fetches financial data for AI-related stocks and saves to a CSV# Install required packages!pip install requests pandas -qimport jsonimport requestsimport pandas as pdimport timeimport iofrom google.colab import files# Create the tickers JSON filetickers_json = """{  "tickers": [    "NVDA",    "AMD",    "INTC",    "TSM",    "ASML",    "AVGO",    "MSFT"  ]}"""# Write tickers to a JSON filewith open('ai_tickers.json', 'w') as f:    f.write(tickers_json)# Load the tickerswith open('ai_tickers.json', 'r') as file:    data = json.load(file)    tickers = data['tickers']print(f"Found {len(tickers)} tickers:", tickers)# Define the API key and base URLapi_key = "5oVQAxDvQ1w46hcuTOYLzKsIOSGhbo5b"base_url = "https://financialmodelingprep.com/api/v3"# Function to fetch financial data for a tickerdef fetch_financial_data(ticker):    results = {}    results['ticker'] = ticker    # 1. Get quote (current price)    quote_url = f"{base_url}/quote/{ticker}?apikey={api_key}"    quote_response = requests.get(quote_url)    if quote_response.status_code == 200 and quote_response.json():        quote_data = quote_response.json()[0]        results["current_price"] = quote_data.get("price")        results["market_cap"] = quote_data.get("marketCap")    else:        print(f"Failed to get quote data for {ticker}")        results["current_price"] = None        results["market_cap"] = None    # 2. Get key metrics for ratios (P/E, P/S, P/B, EV/EBITDA, PEG)    metrics_url = f"{base_url}/key-metrics/{ticker}?limit=1&apikey={api_key}"    metrics_response = requests.get(metrics_url)    if metrics_response.status_code == 200 and metrics_response.json():        metrics_data = metrics_response.json()[0]        results["pe_ratio"] = metrics_data.get("peRatio")        results["price_to_sales"] = metrics_data.get("priceToSalesRatio")        results["price_to_book"] = metrics_data.get("pbRatio")        results["ev_to_ebitda"] = metrics_data.get("enterpriseValueOverEBITDA")        results["peg_ratio"] = metrics_data.get("pegRatio")    else:        print(f"Failed to get metrics data for {ticker}")        results["pe_ratio"] = None        results["price_to_sales"] = None        results["price_to_book"] = None        results["ev_to_ebitda"] = None        results["peg_ratio"] = None    # 3. Get income statement for Revenue, EPS, Net Income, R&D    income_url = f"{base_url}/income-statement/{ticker}?limit=1&apikey={api_key}"    income_response = requests.get(income_url)    if income_response.status_code == 200 and income_response.json():        income_data = income_response.json()[0]        results["revenue"] = income_data.get("revenue")        results["eps"] = income_data.get("eps")        results["net_income"] = income_data.get("netIncome")        results["research_development"] = income_data.get("researchAndDevelopmentExpenses")    else:        print(f"Failed to get income statement data for {ticker}")        results["revenue"] = None        results["eps"] = None        results["net_income"] = None        results["research_development"] = None    return results# Create an empty list to store the resultsall_data = []# Loop through all tickersfor ticker in tickers:    print(f"Fetching data for {ticker}...")    try:        ticker_data = fetch_financial_data(ticker)        all_data.append(ticker_data)        # Add a small delay to avoid hitting rate limits        time.sleep(0.5)    except Exception as e:        print(f"Error fetching data for {ticker}: {e}")# Create a DataFramedf = pd.DataFrame(all_data)# Reorder columns to have ticker firstcols = ['ticker'] + [col for col in df.columns if col != 'ticker']df = df[cols]# Save to CSVdf.to_csv('ai_stock_metrics.csv', index=False)# Display the DataFrameprint("\nFinal DataFrame:")display(df)# Also show some summary statisticsprint("\nSummary Statistics:")display(df.describe())# Enable downloading the CSV file from Colabfiles.download('ai_stock_metrics.csv')# Optional: Format the table for better visualizationtry:    # Format currency values    df_formatted = df.copy()    currency_cols = ['current_price', 'market_cap', 'revenue', 'net_income', 'research_development']    ratio_cols = ['pe_ratio', 'price_to_sales', 'price_to_book', 'ev_to_ebitda', 'peg_ratio', 'eps']    for col in currency_cols:        if col in df_formatted.columns:            # Format large numbers with K, M, B suffixes            df_formatted[col] = df_formatted[col].apply(lambda x:                f"${x/1000000000:.2f}B" if x and x >= 1000000000 else                (f"${x/1000000:.2f}M" if x and x >= 1000000 else                 (f"${x/1000:.2f}K" if x and x >= 1000 else                  (f"${x:.2f}" if x else "N/A"))))    for col in ratio_cols:        if col in df_formatted.columns:            df_formatted[col] = df_formatted[col].apply(lambda x: f"{x:.2f}" if x else "N/A")    print("\nFormatted Table:")    display(df_formatted)except Exception as e:    print(f"Could not format table: {e}")